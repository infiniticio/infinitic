/**
 * "Commons Clause" License Condition v1.0
 *
 * The Software is provided to you by the Licensor under the License, as defined
 * below, subject to the following condition.
 *
 * Without limiting other conditions in the License, the grant of rights under the
 * License will not include, and the License does not grant to you, the right to
 * Sell the Software.
 *
 * For purposes of the foregoing, “Sell” means practicing any or all of the rights
 * granted to you under the License to provide to third parties, for a fee or
 * other consideration (including without limitation fees for hosting or
 * consulting/ support services related to the Software), a product or service
 * whose value derives, entirely or substantially, from the functionality of the
 * Software. Any license notice or attribution required by the License must also
 * include this Commons Clause License Condition notice.
 *
 * Software: Infinitic
 *
 * License: MIT License (https://opensource.org/licenses/MIT)
 *
 * Licensor: infinitic.io
 */

package io.infinitic.exceptions

import io.infinitic.common.serDe.SerializedData
import io.infinitic.common.serDe.SerializedDataType
import io.infinitic.common.serDe.json.Json
import io.infinitic.common.tasks.data.TaskOptions
import io.infinitic.workflows.Channel
import io.infinitic.workflows.SendChannel
import kotlinx.serialization.Serializable

@Serializable
sealed class UserException : RuntimeException()

@Serializable
sealed class UserExceptionInSerialization(
    val msg: String,
    val help: String
) : UserException() {
    override val message = "$msg.\n$help"
}

@Serializable
sealed class UserExceptionInClient(
    val msg: String,
    val help: String
) : UserException() {
    override val message = "$msg.\n$help"
}

@Serializable
sealed class UserExceptionInTaskExecutor(
    val msg: String,
    val help: String
) : UserException() {
    override val message = "$msg.\n$help"
}

@Serializable
sealed class UserExceptionInWorkflowTask(
    val msg: String,
    val help: String
) : UserException() {
    override val message = "$msg.\n$help"
}

/***********************
 * Exceptions during serialization
 ***********************/

@Serializable
data class MissingMetaJavaClassDuringDeserialization(
    val data: SerializedData
) : UserExceptionInSerialization(
    msg = "Trying to deserialize data without explicitly providing java class in \"${SerializedData.META_JAVA_CLASS}\" meta value",
    help = "You are probably trying to deserialize data generated by non-Java code. " +
        "Update this non-java code to include a \"${SerializedData.META_JAVA_CLASS}\" meta value " +
        "describing the java class that should be used"
)

@Serializable
data class ClassNotFoundDuringDeserialization(
    val name: String
) : UserExceptionInSerialization(
    msg = "Trying to deserialize data into \"$name\$ but this class is unknown",
    help = "Please make sure to include this class in your code base."
)

@Serializable
data class TryingToRetrieveJsonFromNonJsonData(
    val name: String?,
    val type: SerializedDataType
) : UserExceptionInSerialization(
    msg = "Trying to retrieve json from \"$name\$ serialized data, but the serialized format is $type",
    help = ""
)

@Serializable
data class SerializerNotFoundDuringDeserialization(
    val name: String
) : UserExceptionInSerialization(
    msg = "Trying to deserialize data into \"$name\$ but this class has no serializer",
    help = "Your data was correctly serialized, so make sure you use the same code base everywhere"
)

@Serializable
data class ExceptionDuringKotlinDeserialization(
    val name: String,
    val causeString: String
) : UserExceptionInSerialization(
    msg = "Trying to deserialize data into \"$name\$ but an error occurred during Kotlin deserialization: $causeString",
    help = "Please make sure your class \"$name\$ can be safely serialized/deserialized using kotlinx.serialization and avro4k"
)

@Serializable
data class ExceptionDuringJsonDeserialization(
    val name: String,
    val causeString: String
) : UserExceptionInSerialization(
    msg = "Trying to deserialize data into \"$name\$ but an error occurred during json deserialization: $causeString",
    help = "Please make sure your class \"$name\$ can be safely serialized/deserialized in Json using FasterXML/jackson"
)

@Serializable
data class ErrorDuringJsonSerializationOfParameter(
    val parameterName: String,
    val parameterType: String,
    val methodName: String,
    val className: String
) : UserExceptionInSerialization(
    msg = "Error during Json serialization of parameter $parameterName of $className::$methodName",
    help = "We are using Jackson library per default to serialize object through the ${Json::class.java.name} wrapper. If an exception is thrown during serialization, please consider those options:\n" +
        "- modifying $parameterType to make it serializable by ${Json::class.java.name}\n" +
        "- replacing $parameterType per simpler parameters in $className::$methodName\n"
)

@Serializable
data class ErrorDuringJsonDeserializationOfParameter(
    val parameterName: String,
    val parameterType: String,
    val methodName: String,
    val className: String
) : UserExceptionInSerialization(
    msg = "Error during Json de-serialization of parameter $parameterName of $className::$methodName",
    help = "We are using Jackson library per default to serialize/deserialize object through the ${Json::class.java.name} wrapper. If an exception is thrown during serialization or deserialization, please consider those options:\n" +
        "- modifying $parameterType to make it serializable by ${Json::class.java.name}\n" +
        "- replacing $parameterType per simpler parameters in $className::$methodName\n"
)

@Serializable
data class InconsistentJsonSerializationOfParameter(
    val parameterName: String,
    val parameterType: String,
    val methodName: String,
    val className: String
) : UserExceptionInSerialization(
    msg = "Serializated and deserialized value of parameter $parameterName of $className::$methodName are not equal",
    help = "We are using Jackson library per default to serialize/deserialize object through the ${Json::class.java.name} wrapper. If an exception is thrown during serialization or deserialization, consider those options:\n" +
        "- modifying $parameterType to make it serializable by ${Json::class.java.name}\n" +
        "- replacing $parameterType per simpler parameters in $className::$methodName\n" +
        "- update \"equals\" method of $parameterType to make sure that 2 different instances with same internal values are equal"
)

/***********************
 * Exceptions in client
 ***********************/

@Serializable
data class NotAStub(
    val name: String,
    val async: String
) : UserExceptionInClient(
    msg = "The first parameter of the client.$async(.) function should be a stub",
    help = "Make sure to provide the stub provided by a client.task($name) or client.workflow($name) function."
)

@Serializable
data class IncorrectExistingStub(
    val name: String,
    val action: String
) : UserExceptionInClient(
    msg = "The first parameter of the client.$action(.) function should be the stub of an existing task or workflow",
    help = "Make sure to provide the stub returned by client.getTask($name, id) or client.getWorkflow($name, id)function, with an id."
)

@Serializable
data class IncorrectNewStub(
    val name: String,
    val action: String
) : UserExceptionInClient(
    msg = "The first parameter of the client.$action(.) function should be the stub of a new task or workflow",
    help = "Make sure to provide the stub returned by client.newTask($name) or client.newWorkflow($name)."
)

@Serializable
data class CanNotReuseTaskStub(
    val name: String,
) : UserExceptionInClient(
    msg = "You can not reuse a task stub ($name) already dispatched",
    help = "Please create a new stub using `newTask()` for each task dispatch`"
)

@Serializable
data class CanNotReuseWorkflowStub(
    val name: String,
) : UserExceptionInClient(
    msg = "You can not reuse a workflow stub ($name) already dispatched",
    help = "Please create a new stub using `newWorkflow()` for each workflow dispatch`"
)

@Serializable
data class CanNotUseNewTaskStub(
    val name: String,
    val action: String
) : UserExceptionInClient(
    msg = "You can not `$action` a new task stub",
    help = "Please target an existing $name task using `getTask()` "
)

@Serializable
data class CanNotUseNewWorkflowStub(
    val name: String,
    val action: String
) : UserExceptionInClient(
    msg = "You can not `$action` a new workflow stub",
    help = "Please target an existing $name workflow using `getWorkflow()` "
)

@Serializable
data class SuspendMethodNotSupported(
    val klass: String,
    val method: String
) : UserExceptionInClient(
    msg = "method \"$method\" in class \"$klass\" is a suspend function",
    help = "Suspend functions are not supported"
)

@Serializable
data class NoMethodCall(
    val klass: String
) : UserExceptionInClient(
    msg = "The method to call for your task or workflow is missing",
    help = "Make sure to call a method of \"$klass\" in the second parameter of client.async()"
)

@Serializable
data class NoSendMethodCall(
    val klass: String,
    val channel: String
) : UserExceptionInClient(
    msg = "Nothing to send for $klass::$channel",
    help = "Make sure to call the \"send\" method in the second parameter of client.async($channel())"
)

@Serializable
data class MultipleMethodCalls(
    val klass: String,
    val method1: String?,
    val method2: String
) : UserExceptionInClient(
    msg = "Only one method of \"$klass\" can be dispatched at a time. You can not call \"$method2\" method as you have already called \"$method1\"",
    help = "Make sure you call only one method of \"$klass\" - multiple calls in the provided lambda is forbidden"
)

@Serializable
data class ChannelUsedOnNewWorkflow(
    val workflow: String
) : UserExceptionInClient(
    msg = "Channels can only be used for an existing instance of $workflow workflow",
    help = "Make sure you target a running workflow, by providing and id when defining your workflow stub"
)

@Serializable
data class UnknownMethodInSendChannel(
    val workflow: String,
    val channel: String,
    val method: String
) : UserExceptionInClient(
    msg = "Unknown method $method used on channel $channel in $workflow",
    help = "Make sure to use the ${SendChannel<*>::send.name} method"
)

@Serializable
data class UnknownTask(
    val taskId: String,
    val taskName: String,
) : UserExceptionInClient(
    msg = "Failed to  wait for task $taskId completion ($taskName)",
    help = "This task instance is probably already completed"
)

@Serializable
data class UnknownWorkflow(
    val workflowId: String,
    val workflowName: String,
) : UserExceptionInClient(
    msg = "Failed to  wait for workflow $workflowId completion ($workflowName)",
    help = "This workflow instance is probably already completed"
)

/***********************
 * Exceptions in task executor
 ***********************/

@Serializable
data class ClassNotFoundDuringInstantiation(
    val name: String
) : UserExceptionInTaskExecutor(
    msg = "Impossible to find a Class associated to $name",
    help = "Use \"register\" method to provide an instance that will be used associated to $name"
)

@Serializable
data class NoMethodFoundWithParameterTypes(
    val klass: String,
    val method: String,
    val parameterTypes: List<String>
) : UserExceptionInTaskExecutor(
    msg = "No method \"$method(${ parameterTypes.joinToString() })\" found in \"$klass\" class",
    help = "Make sure parameter types are consistent with your method definition"
)

@Serializable
data class NoMethodFoundWithParameterCount(
    val klass: String,
    val method: String,
    val parameterCount: Int
) : UserExceptionInTaskExecutor(
    msg = "No method \"$method\" with $parameterCount parameters found in \"$klass\" class",
    help = ""
)

@Serializable
data class TooManyMethodsFoundWithParameterCount(
    val klass: String,
    val method: String,
    val parameterCount: Int
) : UserExceptionInTaskExecutor(
    msg = "Unable to decide which method \"$method\" with $parameterCount parameters to use in \"$klass\" class",
    help = ""
)

@Serializable
data class ProcessingTimeout(
    val klass: String,
    val delay: Float
) : UserExceptionInTaskExecutor(
    msg = "The processing of task \"$klass\" took more than $delay seconds",
    help = "You can increase (or remove entirely) this constraint in the options ${TaskOptions::javaClass.name}"
)

/***********************
 * Exceptions in workflow tasks
 ***********************/

@Serializable
data class WorkflowUpdatedWhileRunning(
    val workflow: String,
    val method: String,
    val position: String
) : UserExceptionInWorkflowTask(
    msg = "Workflow \"$workflow\" has been updated since its launch (detected at position $position in $method)",
    help = "You can either kill this instance or revert its previous definition to be able to resume it"
)

@Serializable
data class NoMethodCallAtAsync(
    val klass: String
) : UserExceptionInWorkflowTask(
    msg = "You must use a method of \"$klass\" when using \"async\" method",
    help = "Make sure to call exactly one method of \"$klass\" within the curly braces - example: async(foo) { bar(*args) }"
)

@Serializable
data class MultipleMethodCallsAtAsync(
    val klass: String,
    val method1: String?,
    val method2: String
) : UserExceptionInClient(
    msg = "Only one method of \"$klass\" can be called at a time. You can not call \"$method2\" method as you have already called \"$method1\"",
    help = "Make sure you call only one method of \"$klass\" - multiple calls in the provided lambda is forbidden"
)

@Serializable
data class ShouldNotWaitInsideInlinedTask(
    val method: String
) : UserExceptionInWorkflowTask(
    msg = "You must not suspend computations inside an inlined task",
    help = "In $method, make sure you do not wait for task or child workflow completion inside `task { ... }`"
)

@Serializable
data class ShouldNotUseAsyncFunctionInsideInlinedTask(
    val method: String
) : UserExceptionInWorkflowTask(
    msg = "You must not suspend computations inside an inlined task",
    help = "In $method, make sure you do not use `async { ... }` function inside `task { ... }`"
)

@Serializable
data class WorkflowUsedAsTask(
    val name: String,
    val workflow: String
) : UserExceptionInWorkflowTask(
    msg = "$name is used as a task, but registered implementation $workflow is a workflow",
    help = "Check that you are using $name consistently between client and workers"
)

@Serializable
data class TaskUsedAsWorkflow(
    val name: String,
    val task: String
) : UserExceptionInWorkflowTask(
    msg = "$name is used as a workflow, but registered implementation $task is a task",
    help = "Check that you are using $name consistently between client and workers"
)

@Serializable
data class ParametersInChannelMethod(
    val workflow: String,
    val method: String
) : UserExceptionInWorkflowTask(
    msg = "in workflow $workflow, method $method returning a ${Channel::class.simpleName} should NOT have any parameter",
    help = ""
)

@Serializable
data class NonUniqueChannelFromChannelMethod(
    val workflow: String,
    val method: String
) : UserExceptionInWorkflowTask(
    msg = "in workflow $workflow, method $method should return the same ${Channel::class.simpleName} instance when called multiple times",
    help = ""
)

@Serializable
data class MultipleNamesForChannel(
    val workflow: String,
    val method: String,
    val otherMethod: String
) : UserExceptionInWorkflowTask(
    msg = "in workflow $workflow, method $method return a ${Channel::class.simpleName} instance already associated with name $otherMethod",
    help = "Make sure to not have multiple methods returning the same channel"
)

@Serializable
object NameNotInitializedInChannel : UserExceptionInWorkflowTask(
    msg = "A ${Channel::class.simpleName} is used without name",
    help = "Make sure to have a method that returns this channel."
)
